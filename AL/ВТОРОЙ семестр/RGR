using System;
using System.Collections.Generic;

namespace RGR_Algor
{
    internal class Program
    {
        public class Menu
        {
            public void showMenu()
            {
                Console.WriteLine("\n1) Начать скобочную последовательность\n2) Начать польскую запись\n3) Условия задачи\n4) Об авторе\n5) Выход\n");
            }
        }

        public static bool IsValid(string s)
        {
            if (s == null) throw new ArgumentNullException(nameof(s));

            Stack<char> stack = new Stack<char>();

            foreach (char c in s)
            {
                if (c == '(' || c == '{' || c == '[')
                {
                    stack.Push(c);
                }
                else if (c == ')' || c == '}' || c == ']')
                {
                    if (stack.Count == 0) return false;

                    char top = stack.Pop();
                    if ((c == ')' && top != '(') ||
                        (c == '}' && top != '{') ||
                        (c == ']' && top != '['))
                    {
                        return false;
                    }
                }
            }

            return stack.Count == 0;
        }

        public static double EvaluateRPN(string[] tokens)
        {
            Stack<double> stack = new Stack<double>();

            foreach (string token in tokens)
            {
                if (double.TryParse(token, out double number))
                {
                    stack.Push(number);
                }
                else
                {
                    if (stack.Count < 2)
                        throw new InvalidOperationException("Ошибка. Некорректная последовательность операторов и операндов");

                    double b = stack.Pop();
                    double a = stack.Pop();
                    switch (token)
                    {
                        case "+":
                            stack.Push(a + b);
                            break;
                        case "-":
                            stack.Push(a - b);
                            break;
                        case "*":
                            stack.Push(a * b);
                            break;
                        case "/":
                            if (b == 0)
                                throw new DivideByZeroException("Ошибка. Деление на ноль");
                            stack.Push(a / b);
                            break;
                        default:
                            throw new InvalidOperationException("Ошибка. Неизвестная команда");
                    }
                }
            }

            if (stack.Count != 1)
                throw new InvalidOperationException("Ошибка. Некорректная последовательность операторов и операндов");

            return stack.Pop();
        }

        static void Main()
        {
            Menu menu = new Menu();
            menu.showMenu();
            string p_menu;
            while ((p_menu = Console.ReadLine()) != "5")
            {
                switch (p_menu)
                {
                    case "1":
                        Console.WriteLine("Введите строку, состоящую из скобочек:");
                        string input = Console.ReadLine();
                        bool result = IsValid(input);
                        Console.WriteLine($"Последовательность: {input} {(result ? "правильная" : "неправильная")}");
                        break;

                    case "2":
                        Console.WriteLine("Введите выражение в обратной польской записи (через пробел):");
                        string expression = Console.ReadLine();
                        string[] tokens = expression.Split(' ');
                        try
                        {
                            double evalResult = EvaluateRPN(tokens);
                            Console.WriteLine($"Результат: {evalResult}");
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine(ex.Message);
                        }
                        break;

                    case "3":
                        Console.WriteLine("1) Необходимо проверить скобочную последовательность на правильность\n2) Необходимо получить результат вычислений, принимая на вход обратный польский вид записи выражения");
                        break;

                    case "4":
                        Console.WriteLine("Студент 1 курса ОмГТУ группы ФИТ-231, Мельников Максим Кириллович");
                        break;

                    default:
                        Console.WriteLine("Неизвестная команда. Введите значение от 1 до 5");
                        break;
                }
                menu.showMenu();
            }
        }
    }
}

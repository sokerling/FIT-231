from collections import defaultdict, deque


class Graph:
    def __init__(self, vertices):
        self.graph = defaultdict(list)
        self.ROW = vertices

    def add_edge(self, u, v, w):
        self.graph[u].append((v, w))

    def bfs(self, s, t, parent):
        visited = [False] * self.ROW
        queue = deque()
        queue.append(s)
        visited[s] = True

        while queue:
            u = queue.popleft()
            for v, capacity in self.graph[u]:
                if visited[v] == False and capacity > 0:
                    queue.append(v)
                    visited[v] = True
                    parent[v] = (u, capacity)
                    if v == t:
                        return True
        return False

    def ford_fulkerson(self, source, sink):
        parent = [-1] * self.ROW
        max_flow = 0

        while self.bfs(source, sink, parent):
            path_flow = float("Inf")
            s = sink

            while s != source:
                u, capacity = parent[s]
                path_flow = min(path_flow, capacity)
                s = u

            v = sink
            while v != source:
                u, _ = parent[v]
                for i, (adj_v, adj_cap) in enumerate(self.graph[u]):
                    if adj_v == v:
                        self.graph[u][i] = (adj_v, adj_cap - path_flow)
                for i, (adj_v, adj_cap) in enumerate(self.graph[v]):
                    if adj_v == u:
                        self.graph[v][i] = (adj_v, adj_cap + path_flow)
                v = u

            max_flow += path_flow

        return max_flow


g = Graph(6)
g.add_edge(0, 1, 16)
g.add_edge(0, 2, 13)
g.add_edge(1, 2, 10)
g.add_edge(1, 3, 12)
g.add_edge(2, 1, 4)
g.add_edge(2, 4, 14)
g.add_edge(3, 2, 9)
g.add_edge(3, 5, 20)
g.add_edge(4, 3, 7)
g.add_edge(4, 5, 4)

source = 0
sink = 5

print("Максимальный поток:", g.ford_fulkerson(source, sink))

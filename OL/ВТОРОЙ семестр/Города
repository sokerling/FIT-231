def read_input(file_path):
    with open(file_path, 'r') as f:
        data = f.read().splitlines()
    return data

def write_output(file_path, result):
    with open(file_path, 'w') as f:
        f.write(f"{len(result)}\n")
        for length in result:
            f.write(f"{length}\n")

def find_cycles(cities):
    answer = []
    while len(cities) > 1:
        graph = {}
        nodes = []
        result = []
        path = [] 
        vertex_stack = [] 
        edge_stack = [] 

        node_set = set()
        for word in cities:
            node_set.add(word[0])
            node_set.add(word[-1])

        nodes = list(node_set)
    
        for symbol in nodes:
            lst = []
            for word in cities:
                if word[0] == symbol or word[-1] == symbol:
                    lst.append(word)
            graph[symbol] = lst

        start_node = nodes[0]
        vertex_stack.append(start_node)
        while vertex_stack:
            cur_edge_list = graph[vertex_stack[-1]].copy()
            if len(cur_edge_list) > 0:
                edge_stack.append(cur_edge_list[0])
                cur_edge_list.pop(0)
                graph[vertex_stack[-1]] = cur_edge_list
                cur_node = edge_stack[-1][-1]
                vertex_stack.append(cur_node)
            else:
                path.append(vertex_stack.pop())
                if len(edge_stack) > 0:
                    result.append(edge_stack.pop())
        result.reverse()
        result_dict = {k: i for i, k in enumerate(result)}
        for key in result_dict.keys():
            cities.remove(key)
        if result_dict:
            answer.append(len(result_dict))

    return sorted(answer, reverse=True)

def main(input_file, output_file):
    cities = read_input(input_file)
    answer = find_cycles(cities)
    write_output(output_file, answer)

if __name__ == "__main__":
    input_file = 'input.txt'
    output_file = 'output.txt'
    main(input_file, output_file)
